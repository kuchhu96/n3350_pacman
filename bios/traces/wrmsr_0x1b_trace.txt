wrmsr_xlat:
[   145] U0c80:  MOVE_DSZ32() 
[     0] U0c81: LFNCEMARK-> tmp8:= MOVEINSERTFLGS_DSZ64(0x00000030, rcx) !m1 
[   145] U0c82:  tmp5:= CONCAT_DSZ32(rdx, rax) 
[   146] U0c84:  NOP 
[     0] U0c85:  NOP 
[   146] U0c86:  tmp1:= TESTUSTATE( , SYS, UST_USER_MODE | UST_VMX_DUAL_MON | UST_VMX_GUEST) !m1 ? SEQW SAVEUIP0 U0c88? SEQW GOTO U677d
[   146] U0c88:  tmp2:= AND_DSZ32(0xc0000f80, rcx) 
[     0] U0c89:  tmp2:= SUB_DSZ32(0x00000800, tmp2) 
[   147] U00f8:  tmp14:= SAVEUIP(0x01, U4055) !m0 SEQW GOTO U0861
[     0] U00f9:  tmp2:= SUB_DSZN(0x000006e0, rcx) !m1 
[   148] U00fa:  UJMPCC_DIRECT_NOTTAKEN_CONDZ(tmp2, U00fd) 
[   148] U0c8a:  UJMPCC_DIRECT_NOTTAKEN_CONDZ(tmp2, U00fd) SEQW GOTO U00f9
[   162] U3ce8:  tmp2:= AND_DSZ32(0x0000003f, tmp10) 
[     0] U3ce9:  tmp2:= OR_DSZ32(tmp1, tmp2) 
[   163] U3cec:  UFLOWCTRL(tmp2, tmp13, URET0) 
[     0] U3ced:  tmp1:= AND_DSZ32(0x00000004, tmp10) 
[   164] U3cee:  tmp1:= SHL_DSZ64(tmp1, 0x00000021) 
[   164] U3cf0: LFNCEWTMRK-> MOVETOCREG_DSZ64(tmp1, 0x752) 
[     0] U3cf1:  tmp14:= SHR_DSZ32(tmp10, 0x00000016) 
[     0] U00fd:  tmp10:= OR_DSZ32(0x00004000, tmp8) 
[   165] U00fe:  tmp10:= NOTAND_DSZ32(0x00018000, tmp10) SEQW GOTO U0ae5
[   165] U0ae4:  tmp10:= NOTAND_DSZ32(0x0001c000, tmp8) 
[     0] U0ae5:  tmp10:= MSR2CR( , tmp10) 
[   165] U0ae6:  SAVEUIP( , 0x00, U0686) SEQW GOTO U3ce1
[   165] U3cf2:  tmp14:= AND_DSZ32(0x000003fc, tmp14) 
[   165] U3cf4:  tmp14:= OR_DSZ32(0x00523000, tmp14) 
[     0] U3cf5: SYNCWTMRK-> UFLOWCTRL(tmp2, tmp14, URET1) 
[     0] U3ce1:  tmp13:= SHR_DSZ32(tmp10, 0x00000003) 
[   166] U3ce2:  tmp13:= AND_DSZ32(0x00000078, tmp13) 
[   166] U3ce4:  tmp13:= OR_DSZ32(0x00523700, tmp13) 
[     0] U3ce5:  tmp14:= SELECTCC_DSZ32_CONDB(tmp8, 0x00000080) 
[   166] U3cf6:  tmp2:= AND_DSZ32(0x3ffff000, tmp8) 
[   166] U3cf8: LFNCEMARK-> UJMPCC_DIRECT_NOTTAKEN_CONDNZ(tmp2, U2711) 
[     0] U3cf9:  tmp10:= SHR_DSZ32(tmp10, 0x0000000a) 
[   167] U3ce6:  tmp13:= OR_DSZ32(tmp13, tmp14) 
[   167] U3cfa:  tmp12:= OR_DSZ32(0x0000c000, tmp8) 
[   167] U3cfc:  tmp12:= MSR2CR( , tmp12) 
[     0] U3cfd:  tmp2:= OR_DSZ32(0x00014000, tmp8) 
[   168] U3cea:  tmp2:= UFLOWCTRL(tmp2, tmp2, USTATE) 
[   168] U3cfe:  tmp2:= MSR2CR( , tmp2) 
[   168] U3d00:  tmp12:= CONCAT_DSZ32(tmp2, tmp12) 
[     0] U3d01:  tmp1:= ZEROEXT_DSZ32(0x00100408) 
[   169] U3d02:  tmp1:= CONCAT_DSZ32(0x90810200, tmp1) 
[   169] U3d04:  tmp3:= READURAM( , 0x0035, 64) 
[     0] U3d05:  tmp3:= AND_DSZ64(tmp1, tmp3) 
[   170] U3d06:  tmp1:= ZEROEXT_DSZ32(0x020b8000) 
[   170] U3d08:  tmp1:= CONCAT_DSZ32(0x003c491c, tmp1) 
[     0] U3d09:  tmp2:= READURAM( , 0x0077, 64) 
[   171] U3d0a:  tmp1:= AND_DSZ64(tmp1, tmp2) 
[   171] U3d0c:  tmp2:= BTR_DSZ64(tmp1, 0x00000023) 
[     0] U3d0d:  TESTUSTATE( , SYS, UST_SMM) !m1 ? SEQW GOTO U3d16
[   172] U3d0e:  tmp2:= BTC_DSZ64(tmp1, 0x00000023) 
[   172] U3d10:  tmp1:= READURAM( , 0x0023, 64) 
[     0] U3d11:  tmp1:= AND_DSZ32(0x00000040, tmp1) 
[   173] U3d12:  tmp3:= OR_DSZ64(tmp1, tmp3) 
[   173] U3d14:  TESTUSTATE( , UCODE, 0x0800) ? SEQW GOTO U3d16
[     0] U3d15:  tmp3:= BTS_DSZ64(tmp3, 0x0000003d) 
[   174] U3d16:  tmp3:= OR_DSZ64(tmp2, tmp3) 
[   174] U3d18:  tmp3:= XOR_DSZ64(0x00020008, tmp3) 
[     0] U3d19:  tmp2:= AND_DSZ32(0x00003fff, tmp10) 
[     0] U0685:  NOP 
[   175] U0686:  URET(0x00) 
[   175] U3d1a:  tmp2:= SHL_DSZ32(tmp2, 0x00000002) SEQW URET0
[   179] U37b8:  tmp2:= SAVEUIP( , 0x00, U3780) 
[     0] U37b9:  tmp1:= READURAM( , 0x0010, 64) 
[   180] U37ba:  tmp1:= NOTAND_DSZ64(0xffffffff, tmp1) 
[   180] U37bc:  tmp1:= NOTAND_DSZ64(tmp2, tmp1) 
[     0] U37bd:  tmp1:= AND_DSZ64(tmp5, tmp1) 
[   180] U37be: LFNCEWTMRK-> UJMPCC_DIRECT_NOTTAKEN_CONDNZ(tmp1, U2711) SEQW URET0
[   184] U3780:  SAVEUIP( , 0x00, U60d2) 
[     0] U3781:  TESTUSTATE( , UCODE, 0x000c) ? SEQW GOTO U3701
[   186] U3782: SYNCWAIT-> tmp12:= ZEROEXT_DSZ32N(tmp12) !m1 
[   192] U3784:  TESTUSTATE( , SYS, 0x4000) !m1 ? SEQW GOTO U3786
[     0] U3785:  tmp12:= PORTIN_DSZ32_ASZ16_SC1(0x0078) !m1,m2 
[   194] U3700:  SAVEUIP( , 0x00, U2e2a) 
[     0] U3701: SYNCWAIT-> TESTUSTATE( , UCODE, !0x00e4) !m0 ? SEQW URET1
[   194] U3786:  tmp1:= NOTAND_DSZ64(tmp12, tmp5) 
[   194] U3788: LFNCEWTMRK-> UJMPCC_DIRECT_NOTTAKEN_CONDNZ(tmp1, U0009) SEQW GOTO U3701
[     0] U3789:  NOP 
[   198] U3246:  BTUJB_DIRECT_NOTTAKEN(tmp2, 0x0000000a, U2711) !m0,m1 SEQW GOTO U69d1
[   199] U3244:  tmp2:= SHR_DSZ64(tmp3, 0x0000000f) 
[     0] U3245:  tmp2:= NOTAND_DSZ32(tmp2, tmp5) 
[     0] U69d1:  tmp1:= SHR_DSZ64(tmp5, 0x00000020) 
[   199] U69d2:  tmp3:= MOVEFROMCREG_DSZ64( , 0x573) 
[   201] U69d4:  tmp2:= NOTAND_DSZ32(tmp3, 0x00000800) 
[     0] U69d5:  tmp1:= OR_DSZ32(tmp2, tmp1) 
[   201] U69d6:  TESTUSTATE( , UCODE, 0x0800) ? SEQW GOTO U69e0
[   205] U69d8:  tmp3:= AND_DSZ32(tmp3, tmp5) 
[     0] U69d9:  tmp2:= MOVEFROMCREG_DSZ64( , 0x572) 
[   205] U69da:  tmp3:= XOR_DSZ32(tmp2, tmp3) 
[   205] U69dc:  tmp3:= NOTAND_DSZ32(0x00000fff, tmp3) 
[     0] U69dd:  tmp1:= OR_DSZ32(tmp3, tmp1) 
[   205] U69de:  UJMPCC_DIRECT_NOTTAKEN_CONDZ(tmp1, U2711) 
[   205] U69e0:  tmp1:= MOVEFROMCREG_DSZ64( , 0x575) 
[     0] U69e1:  tmp2:= SAVEUIP(tmp5, 0x01, U5919) !m0 SEQW SAVEUIP0 U69e2SEQW GOTO U5918
FUN_ucode_0005918:
[   207] U5918:  tmp3:= SUB_DSZ64(0x00000001) 
FUN_ucode_0005919:
[     0] U5919: SYNCMARK-> BTUJNB_DIRECT_NOTTAKEN(tmp1, 0x0000000a, U304e) !m0,m1,m2 
[     0] U304d:  NOP 
uret:
[   231] U304e:  URET(0x00) 
[   233] U69e2:  tmp1:= AND_DSZ32(0x00000c00, tmp5) 
[   233] U69e6:  tmp3:= MOVEFROMCREG_DSZ64( , 0x7bb) 
[   234] U69e4:  tmp1:= SHR_DSZ32(tmp1, 0x0000000a) 
[     0] U69e5:  CMPUJZ_DIRECT_NOTTAKEN(tmp1, 0x00000001, U2711) !m1 
[   234] U69ea:  tmp3:= OR_DSZ32(tmp1, tmp3) 
[   235] U69e8:  tmp3:= AND_DSZ32(0x00000c00, tmp3) 
[     0] U69e9:  tmp3:= SHR_DSZ32(tmp3, 0x00000008) 
[   236] U69ec:  CMPUJZ_DIRECT_NOTTAKEN(tmp3, 0x00000003, U2711) !m0,m1 
[     0] U69ed:  CMPUJZ_DIRECT_NOTTAKEN(tmp3, 0x0000000e, U2711) !m0,m1 
[   239] U69ee:  MOVETOCREG_DSZ64(tmp5, 0x7bb) !m2 
[   246] U69f0:  tmp3:= AND_DSZ32(0x00000800, tmp5) 
[     0] U69f1:  tmp3:= SELECTCC_DSZ32_CONDNZ(tmp3, 0x00020003) 
[   247] U69f2: LFNCEMARK-> MOVETOCREG_DSZ64(tmp3, 0x2d6, 32) !m1,m2 SEQW GOTO U60d2
[     0] U60d1:  UJMPCC_DIRECT_NOTTAKEN_CONDNZ(tmp1, tmpv2) SEQW URET1
[   253] U60d2: LFNCEWAIT-> TESTUSTATE( , SYS, 0x8000) !m1 ? SEQW GOTO U320c
[   268] U320c:  unk_256() 
[     0] U320d:  tmp2:= ZEROEXT_DSZ32(0x00000503) 
[   269] U320e: LFNCEWAIT-> TESTUSTATE( , UCODE, !0x3000) !m0 ? SEQW GOTO U2e30
uend:
[   269] U3210: SYNCWAIT-> NOP SEQW UEND0
[     0] U3211:  tmp13:= MOVEFROMCREG_DSZ64( , 0x000) 
