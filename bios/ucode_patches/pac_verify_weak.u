.org 0x7d00
.patch 0xa78
.entry 2

# pac_auth(signed_ptr: rax, ctx: rcx) -> ptr: rax
# Verify the PAC signature matches given a signed pointer and a context
# --> weaker version with a reduced number of uops to demonstrate PACMAM gadget 1 exploitability
# declare variables
let [key] := tmp0
let [ptr] := rax
let [ctx] := rcx

let [v0] := tmp1
let [v1] := tmp2
let [v2] := tmp3
let [v3] := tmp4
let [mask] := tmp6
let [low_ptr] := tmp7

let [pac] := tmp5

# --- initialize ---
# static key for now
[key] := ZEROEXT_MACRO(0x1122334455667788)

[mask] := ZEROEXT_DSZ64(0xffff)
[mask] := SHL_DSZ64([mask], 0x30)
[low_ptr] := NOTAND_DSZ64([mask], [ptr])

# v0 = 0x736f6d6570736575 ^ key;
[v0] := ZEROEXT_DSZ64(0x6575)
[v0] := XOR_DSZ64([v0], [key])
# v1 = 0x646f72616e646f6d ^ ctx;
[v1] := ZEROEXT_DSZ64(0x6f6d)
[v1] := XOR_DSZ64([v1], [ctx])
# v2 = 0x6c7967656e657261 ^ key;
[v2] := ZEROEXT_DSZ64(0x7261)
[v2] := XOR_DSZ64([v2], [key])
# v3 = 0x7465646279746573 ^ ctx;
[v3] := ZEROEXT_DSZ64(0x6573)
[v3] := XOR_DSZ64([v3], [ctx])

# --- update ---
# v3 ^= ptr;
[v3] := XOR_DSZ64([v3], [low_ptr])

# v0 += v1;
[v0] := ADD_DSZ64([v0], [v1])
# v2 += v3;
[v2] := ADD_DSZ64([v2], [v3])
# v1 = RotateLeft<13>(v1);
[v1] := ROL_DSZ64([v1], 0xd)
# v3 = RotateLeft<16>(v3);
[v3] := ROL_DSZ64([v3], 0x10)
# v1 ^= v0;
[v1] := XOR_DSZ64([v1], [v0])
# v3 ^= v2;
[v3] := XOR_DSZ64([v3], [v2])

# v2 = RotateLeft<32>(v2);
[v2] := ROL_DSZ64([v2], 0x20)

[pac] := XOR_DSZ64([v0], [v1])
[pac] := XOR_DSZ64([pac], [v2])
[pac] := XOR_DSZ64([pac], [v3])

# return ((v0 ^ v1) ^ (v2 ^ v3)) << 48;
[pac] := SHL_DSZ64([pac], 0x30)

# auth ptr
[ptr] := XOR_DSZ64([pac], [ptr])
